target=${PWD##*-}
targ_root=${PWD}

STACKSIZE=${STACKSIZE:-4096000}

case ${SYSNAME} in
nto)
	make_CC="env QCC_CONF_PATH=$QCC_CONF_PATH QNX_HOST=$QNX_HOST QNX_TARGET=$QNX_TARGET ${make_CC}"
	;;
win32)
	QNXSDK_HOST_LDFLAGS="-Wl,--stack=$STACKSIZE"
	;;
esac

export LDFLAGS="-Wl,-s $QNXSDK_HOST_LDFLAGS"

function hook_preconfigure {
	case ${SYSNAME} in
	nto)
		case "${target}" in
		nto*)	TOOL_PATH=${TOOL_PATH:-${QNX_HOST:-/usr}}
			basedir=${TOOL_PATH}/usr ;;
		*)	basedir=/usr/QNX630/host/qnx6/x86/usr ;;
		esac
		;;
	solaris)
		basedir=${QNX_HOST:-/usr/QNX630/host/solaris/sparc/usr}
		;;
	linux)
		basedir=${QNX_HOST:-/usr/QNX630/host/linux/x86/usr}
		;;
	win32)
		basedir=${QNX_HOST:-C:/QNX630/host/win32/x86/usr}
		if [ X${WIN32_ENVIRON} == Xmingw ]; then
			configure_opts="${configure_opts} --host=i586-mingw32"
			configure_opts="${configure_opts} --build=i586-cygwin"
			export CC="gcc -mno-cygwin"
			export AR=ar
			export RANLIB=ranlib
			make_CC="gcc -mno-cygwin"
		else
			export CC="gcc"
			make_CC="gcc"
		fi
		;;
	*)
		echo "Don't have config for ${SYSNAME}"
		exit 1
		;;
	esac
	configure_opts="${configure_opts} --target=${target}"
	configure_opts="${configure_opts} --prefix=${basedir}"
	configure_opts="${configure_opts} --exec-prefix=${basedir}"
	configure_opts="${configure_opts} --with-local-prefix=${basedir}"
	configure_opts="${configure_opts} --enable-haifa"
	configure_opts="${configure_opts} --enable-languages=c++"
	configure_opts="${configure_opts} --enable-threads=posix"
	configure_opts="${configure_opts} --with-gnu-as"
	configure_opts="${configure_opts} --with-gnu-ld"
	configure_opts="${configure_opts} --with-as=${target}-as"
	configure_opts="${configure_opts} --with-ld=${target}-ld"
	if [ ${SYSNAME} == nto ]; then
		configure_opts="${configure_opts} --enable-shared"
		configure_opts="${configure_opts} --enable-multilib"
	else
		configure_opts="${configure_opts} --disable-multilib"
	fi
}

function hook_postconfigure {
	echo "s/^GCC_CFLAGS *=/&-I\$\(QNX_TARGET\)\/usr\/include /"  >/tmp/fix.$$
	if [ ${SYSNAME} == nto ]; then
		echo "s/OLDCC = cc/OLDCC = .\/xgcc -B.\/ -I \$\(QNX_TARGET\)\/usr\/include/" >>/tmp/fix.$$
		echo "/^INCLUDES = /s/\$/ -I\$\(QNX_TARGET\)\/usr\/include/" >>/tmp/fix.$$
		# We've set up GCC to support both big and little endian on SH, 
		# but we only actually support little endian right now. This will
		# cause the configures for the target libraries to fail, since
		# it will test the compiler by attempting a big endian compile
		# which won't link due to a missing libc & crt?.o files.
		# Hack things by forcing compiles/links to always be little endian
		if [ ${target} == ntosh ]; then
			sed -e "s/^CX\{0,2\}FLAGS_FOR_TARGET *=/&-ml /"  <Makefile >1.$$
			mv 1.$$ Makefile
		fi

		if [ ${target} != ntox86 ]; then
		# Only need to build libstdc++ for x86
		rm -Rf ${target}
		fi
		
	else
		# Don't have or want makeinfo to run
		echo "s/	else echo makeinfo/	else echo echo/" >>/tmp/mkinfofix.$$
		sed -f/tmp/mkinfofix.$$ <Makefile >1.$$
		mv 1.$$ Makefile
		rm /tmp/mkinfofix.$$

		# Only need to build libstdc++ & friends on one host
		rm -Rf ${target}
		rm -Rf texinfo
		echo "s/EXTRA_PARTS = crtbeginC++.o crtendC++.o/EXTRA_PARTS =/" >>/tmp/fix.$$

		echo "s/LIBGCC = libgcc.a/LIBGCC =/" >>/tmp/fix.$$
		echo "s/LIBGCC = stmp-multilib/LIBGCC =/" >>/tmp/fix.$$
		echo "s/INSTALL_LIBGCC = install-libgcc/INSTALL_LIBGCC =/" >>/tmp/fix.$$
		echo "s/LIBGCC1 = libgcc1.a/LIBGCC1 =/" >>/tmp/fix.$$
		echo "s/CROSS_LIBGCC1 = libgcc1.cross/CROSS_LIBGCC1 =/" >>/tmp/fix.$$
		echo "s/LIBGCC2 = libgcc2.a/LIBGCC2 =/" >>/tmp/fix.$$
		echo "s/LIBGCC1_TEST = libgcc1-test/LIBGCC1_TEST =/" >>/tmp/fix.$$
		echo "s/	else echo makeinfo/	else echo echo/" >>/tmp/fix.$$
		echo "s/OLDCC = cc/OLDCC = .\/xgcc -B.\//" >>/tmp/fix.$$
	fi
	cd gcc
	sed -f/tmp/fix.$$ <Makefile >1.$$
	mv 1.$$ Makefile
	cd ..
	rm /tmp/fix.$$
}

function hook_premake {
	make_opts="CFLAGS=-O2"
	strip_r_switch
}

function hook_postmake {
	if [ ${SYSNAME} == nto ]; then
#### START KLUDGE
		# Neutrino has a bug where procnto holds the executable
		# open (should only do it for things with "sticky" bit on).
		# The "cp" and "mv"'s below breaks the link with the version
		# of the file that procnto has open, so we can do updates
		# to it. We can get rid of this code later.
		cd gcc
		cp xgcc xgcc.$$
		mv xgcc.$$ xgcc
		cp cc1 cc1.$$
		mv cc1.$$ cc1
		cp cc1plus cc1plus.$$
		mv cc1plus.$$ cc1plus
		cd ..
#### END KLUDGE
		ldrel -L -S $STACKSIZE gcc/cc1
		ldrel -L -S $STACKSIZE gcc/cc1plus
	fi
}

function add_package {

    file=$1
    shift
    line="<QPG:Add file=\"$1\""
    shift
    while [ "$1" ]; do
		case $1 in
		pinfo)
			line="${line} pinfo=\"\$\""
			;;
		target)
			line="${line} target=\"${target#nto}\""
			;;
		sticky)
			line="${line} permissions=\"u+t\""
			;;
		install=*)
			line="${line} install=\"${1#install=}\""
			;;
		linkto=*)
			line="${line} filetype=\"symlink\" linkto=\"${1#linkto=}\""
			;;
		filetype=*)
			line="${line} filetype=\"${1#filetype=}\""
			;;
		proc=*)
			line="${line} proc=\"${1#proc=}\""
			;;
		hos=*)
			line="${line} hos=\"${1#hos=}\""
			;;
		esac
		shift
	done
    echo "${line}/>" >>${targ_root}/${file}.qpg
}

function hook_pinfo {

	echo "<QPG:Generation> <QPG:Values> <QPG:Files>" >${targ_root}/files.qpg

	version=$(sed -e 's/^[^"]*"//' -e's/".*$//' ../gcc/version.c)

	case ${SYSNAME} in
	win32)  exe_suffix=".exe"       ;;
	*)      exe_suffix=""           ;;
	esac

	# Executables
	gen_pinfo -ngcc/cc1${exe_suffix} cc1${exe_suffix} /usr/lib/gcc-lib/${target}/${version} USE="%1>%C --help" LICE=GPL DESCRIPTION="GCC ${version}"
	add_package files gcc/cc1${exe_suffix} hos=${SYSNAME} pinfo sticky
	gen_pinfo -ngcc/cc1plus${exe_suffix} cc1plus${exe_suffix} /usr/lib/gcc-lib/${target}/${version} USE="%1>%C --help" LICE=GPL DESCRIPTION="GCC ${version}"
	add_package files gcc/cc1plus${exe_suffix} hos=${SYSNAME} pinfo sticky
	gen_pinfo -ngcc/cpp0${exe_suffix} cpp0${exe_suffix} /usr/lib/gcc-lib/${target}/${version} USE="%1>%C --help" LICE=GPL DESCRIPTION="GCC ${version}"
	add_package files gcc/cpp0${exe_suffix} hos=${SYSNAME} pinfo sticky
	gen_pinfo -ngcc/collect2${exe_suffix} collect2${exe_suffix} /usr/lib/gcc-lib/${target}/${version} USE="%1>%C --help" LICE=GPL DESCRIPTION="GCC ${version}"
	add_package files gcc/collect2${exe_suffix} hos=${SYSNAME} pinfo sticky

	gen_pinfo -ngcc/c++filt${exe_suffix} ${target}-c++filt-2.95.3${exe_suffix} usr/bin USE="%1>%C --help" LICE=GPL DESCRIPTION="GCC ${version}"
	add_package files gcc/c++filt${exe_suffix} hos=${SYSNAME} pinfo sticky
	gen_pinfo -ngcc/protoize${exe_suffix} ${target}-protoize-2.95.3${exe_suffix} usr/bin USE="%1>%C --help" LICE=GPL DESCRIPTION="GCC ${version}" SYMLINK=${target}-protoize${exe_suffix}
	add_package files gcc/protoize${exe_suffix} hos=${SYSNAME} pinfo sticky
	gen_pinfo -ngcc/unprotoize${exe_suffix} ${target}-unprotoize-2.95.3${exe_suffix} usr/bin USE="%1>%C --help" LICE=GPL DESCRIPTION="GCC ${version}" SYMLINK=${target}-unprotoize${exe_suffix}
	add_package files gcc/unprotoize${exe_suffix} hos=${SYSNAME} pinfo sticky
	gen_pinfo -ngcc/xgcc${exe_suffix} ${target}-gcc-2.95.3${exe_suffix} usr/bin USE="%1>%C --help" LICE=GPL DESCRIPTION="GCC ${version}" SYMLINK=${target}-gcc${exe_suffix}
	add_package files gcc/xgcc${exe_suffix} hos=${SYSNAME} pinfo sticky
	gen_pinfo -ngcc/g++${exe_suffix} ${target}-g++-2.95.3${exe_suffix} usr/bin USE="%1>%C --help" LICE=GPL DESCRIPTION="GCC ${version}" SYMLINK=${target}-c++-2.95.3${exe_suffix} SYMLINK=${target}-c++${exe_suffix} SYMLINK=${target}-g++${exe_suffix}
	add_package files gcc/g++${exe_suffix} hos=${SYSNAME} pinfo sticky
	gen_pinfo -ngcc/gcov${exe_suffix} ${target}-gcov-2.95.3${exe_suffix} usr/bin USE="%1>%C --help" LICE=GPL DESCRIPTION="GCC ${version}" SYMLINK=${target}-gcov${exe_suffix}
	add_package files gcc/gcov${exe_suffix} hos=${SYSNAME} pinfo  
	gen_pinfo -ngcc/specs specs /usr/lib/gcc-lib/${target}/${version} USE="%1>%C --help" LICE=GPL DESCRIPTION="GCC specs ${version}"
	add_package files gcc/specs hos=${SYSNAME} pinfo filetype=noproc

	# If PINFO_STATE is set, use it to compensate for bug in 6.2.1B build-cfg that 
	# always set it to Experimental.
	if ! [ -z "${PINFO_STATE}" ]; then
	for x in $(find ./ -type f -name "*.pinfo"); do
		cat $x | sed -e"s/Experimental/${PINFO_STATE}/g" > $x.newfile
		mv $x.newfile $x
	done
	fi

	# Misc stuff
	add_package files 'gcc/crt*C++.o' hos=any install=/usr/lib/gcc-lib/${target}/${version}/ filetype=noproc

	# Development package stuff
    echo "<QPG:Generation> <QPG:Values> <QPG:Files>" >${targ_root}/files-libgcc.qpg
    
    for lib in $(find gcc -name libgcc.a -type f); do
    	dir=${lib%/*}
    	add_package files-libgcc ${lib} hos=any install=/usr/lib/gcc-lib/${target}/${version}${dir#gcc}/ filetype=noproc
    done
    
    echo "</QPG:Files> </QPG:Values> </QPG:Generation>" >>${targ_root}/files-libgcc.qpg

	if [ -d ${target} ]; then
	#Special stdc++ package for 6.3.0
	echo "<QPG:Generation> <QPG:Values> <QPG:Files>" >${targ_root}/files630.qpg
	  echo '"<QPG:Add handling="copy" file="ntox86/exceptions/libstdc++/libstdc++.so.2.2.10.0" install="/x86/lib/" />"' >>${targ_root}/files630.qpg
	echo "</QPG:Files> </QPG:Values> </QPG:Generation>" >>${targ_root}/files630.qpg

        if (echo ${target} | grep x86)
        then

        CPU="x86"

        echo "<QPG:Generation> <QPG:Values> <QPG:Files>" >${targ_root}/files-libstdc++.qpg

        echo '<QPG:Add file="ntox86/exceptions/libstdc++/libstdc++.so.2.2.10.0" target="x86" install="/x86/lib/" />' >>${targ_root}/files-libstdc++.qpg
        echo '<QPG:Add file="ntox86/exceptions/libstdc++/libstdc++.a.2.2.10.0" target="x86" install="/x86/lib/gcc/2.95.3/" />' >>${targ_root}/files-libstdc++.qpg
	#
        # Make links only in the /usr/lib/gcc-lib/${target}/${version}/ dir 
	# so that we can co-exist with a gcc-3.X install.
	#
        echo '<QPG:Add file="libstdc++.so" install="/x86/lib/gcc/2.95.3/" target="x86" filetype="symlink" linkto="../../libstdc++.so.2.2.10.0"/>' >>${targ_root}/files-libstdc++.qpg
        echo '<QPG:Add file="libstdc++.a" install="/x86/lib/gcc/2.95.3/" target="x86" filetype="symlink" linkto="libstdc++.a.2.2.10.0" />' >>${targ_root}/files-libstdc++.qpg

		header=$(find ${target} -name _G_config.h | head -n1)
		add_package files-libstdc++ hos=any $header install=/usr/lib/gcc-lib/${target}/2.95.3/include/

		echo "</QPG:Files> </QPG:Values> </QPG:Generation>" >>${targ_root}/files-libstdc++.qpg
        fi

		for file in gcc/include/[!Rf]*; do
			case "${file}" in
			gcc/include/limits.h)		;;
			gcc/include/syslimits.h)	;;
			*)
				add_package files ${file} hos=any install=/usr/lib/gcc-lib/${target}/${version}/include/
				;;
			esac
		done

	fi

	echo "</QPG:Files> </QPG:Values> </QPG:Generation>" >>${targ_root}/files.qpg
}

