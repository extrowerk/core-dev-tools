# put this in if you want g++ to use the Dinkum lib
# T_CFLAGS = -DLIBSTDCXX=\"-lcpp\"

# This allows us to use a staging area and find the new header files.
# TCFLAGS is used by xgcc.
TCFLAGS = -I $(shell echo ${QNX_TARGET})/usr/include

# Don't run fixproto or fixinc
STMP_FIXPROTO =
STMP_FIXINC =

ifeq "X$(QNX_SYSTEM_ROOT)" "X"
 T_CPPFLAGS=-DQNX_SYSTEM_ROOT=\"\" -DTARGET_ALIAS=\"$(target_alias)\"
else
 ifeq "$(QNX_SYSTEM_ROOT)" "/"
  T_CPPFLAGS=-DQNX_SYSTEM_ROOT=\"\" -DTARGET_ALIAS=\"$(target_alias)\"
 else
  T_CPPFLAGS=-DQNX_SYSTEM_ROOT=\"$(QNX_SYSTEM_ROOT)\" -DTARGET_ALIAS=\"$(target_alias)\"
 endif
endif

CRTSTUFF_T_CFLAGS = -fno-omit-frame-pointer -fpic

LIB1ASMSRC = arm/lib1funcs.asm
LIB1ASMFUNCS = _udivsi3 _divsi3 _umodsi3 _modsi3 _dvmd_nto _bb_init_func _call_via_rX _interwork_call_via_rX

# We want fine grained libraries, so use the new code to build the
# floating point emulation libraries.
FPBIT = fp-bit.c
DPBIT = dp-bit.c

fp-bit.c: $(srcdir)/config/fp-bit.c
	echo '#define FLOAT' > fp-bit.c
	echo '#ifndef __ARMEB__' >> fp-bit.c
	echo '#define FLOAT_BIT_ORDER_MISMATCH' >> fp-bit.c
	echo '#endif' >> fp-bit.c
	cat $(srcdir)/config/fp-bit.c >> fp-bit.c

dp-bit.c: $(srcdir)/config/fp-bit.c
	echo '#ifndef __ARMEB__' > dp-bit.c
	echo '#define FLOAT_BIT_ORDER_MISMATCH' >> dp-bit.c
	echo '#endif' >> dp-bit.c
	cat $(srcdir)/config/fp-bit.c >> dp-bit.c

MULTILIB_OPTIONS = fpic EB
MULTILIB_DIRNAMES = pic be
MULTILIB_MATCHES = fpic=shared

EXTRA_MULTILIB_PARTS = crtbegin.o crtend.o

LIBGCC = stmp-multilib
INSTALL_LIBGCC = install-multilib

# Currently there is a bug somewhere in GCC's alias analysis
# or scheduling code that is breaking _fpmul_parts in fp-bit.c.
# Disabling function inlining is a workaround for this problem.
TARGET_LIBGCC2_CFLAGS = -Dinhibit_libc -fno-inline -fexceptions -fomit-frame-pointer -g0

LIB2FUNCS_EXTRA = embed-bb.c

embed-bb.c: $(srcdir)/libgcc2.c
	echo '#ifdef inhibit_libc' > $@
	echo '#define L_bb' >> $@
	echo '#undef inhibit_libc' >> $@
	cat $< >> $@
	echo '#endif' >> $@

# Assemble startup files.
$(T)crti.o: $(srcdir)/config/arm/crti.asm $(GCC_PASSES)
	$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(MULTILIB_CFLAGS) $(INCLUDES) \
	-c -o $(T)crti.o -x assembler-with-cpp $(srcdir)/config/arm/crti.asm

$(T)crtn.o: $(srcdir)/config/arm/crtn.asm $(GCC_PASSES)
	$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(MULTILIB_CFLAGS) $(INCLUDES) \
	-c -o $(T)crtn.o -x assembler-with-cpp $(srcdir)/config/arm/crtn.asm

