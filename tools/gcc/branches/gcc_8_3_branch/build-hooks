srcdir=${PWD}/..
targ_root=${PWD}

gcc_version=$(cat ../gcc/BASE-VER)
QNX_TARGET_VERSION=${QNX_TARGET_VERSION:-7.1.0}

qnx_target_version=${QNX_TARGET_VERSION}
qnx_target=qnx$(echo ${QNX_TARGET_VERSION} | sed 's/\.//g')
qnx_os_dir=qnx$(echo ${QNX_TARGET_VERSION} | sed 's/^\([0-9]*\)\..*/\1/g')

nto_target=${PWD##*-}
nto_targdir=${PWD##*-o-nto}
host_target=${PWD##*/}

cpu_string=$(echo ${nto_target} | sed 's/nto//')
case ${cpu_string} in
	armeabi*)
		targetarch=arm
		nto_target=ntoarm
		os_variant=eabi
		case ${cpu_string} in
			armeabihf) os_variant=${os_variant}hf ;;
		esac
		;;
	*)
		targetarch=${cpu_string}
		;;
esac

tmpstring="${targetarch}-nto-qnx${qnx_target_version}${os_variant}"
target=$(${srcdir}/config.sub ${tmpstring})
basedir='/usr'

STACKSIZE=${STACKSIZE:-4096000}

case ${SYSNAME} in
nto)
	make_CC="gcc"
	;;
win*)
	QNXSDK_HOST_LDFLAGS="-Wl,--stack=$STACKSIZE"
	;;
esac

export LDFLAGS="-Wl,-s $QNXSDK_HOST_LDFLAGS"

echo ""
echo "build: ${ac_build:-$(${make_CC} -dumpmachine)}"
echo "host: ${ac_host:-$(${make_CC} -dumpmachine)}"
echo "target: ${target}"
echo ""

function hook_preconfigure {

# Set HOST specific values and flags
	case ${SYSNAME} in
	nto)
		case "${target}" in
		*nto-qnx*)
			TOOL_PATH=${TOOL_PATH:-${QNX_HOST:-/usr/${qnx_target}/host/${qnx_os_dir}/${cpu}}}
			basedir=${TOOL_PATH}/usr
			;;
		*)
			basedir=/usr/${qnx_target}/host/${qnx_os_dir}/${cpu}/usr
			;;
		esac
		;;
	darwin)
		host_cpu=x86_64
		basedir=${QNX_HOST}/usr
		;;
	linux)
		case "${host_target}" in
			win64-*)
				basedir=/c/${qnx_target}/host/win64/${cpu}/usr
				qnxtarget=/c/${qnx_target}/target/${qnx_os_dir}
				export LDFLAGS="${LDFLAGS} -static"
				configure_opts="${configure_opts} --disable-libstdcxx"
				;;
			nto-*)
				CPPFLAGS=
				basedir=/usr/${qnx_target}/host/${qnx_os_dir}/${cpu}/usr
				qnxtarget=/usr/${qnx_target}/target/${qnx_os_dir}
				configure_opts="${configure_opts} --disable-plugin"
				configure_opts="${configure_opts} --disable-libstdcxx"
				;;
			darwin-*)
				basedir=/Developer/SDKs/${qnx_target}/host/darwin/${cpu}/usr
				qnxtarget=/Developer/SDKs/${qnx_target}/target/${qnx_os_dir}
				configure_opts="${configure_opts} --disable-plugin"
				configure_opts="${configure_opts} --disable-libstdcxx"
				;;
			linux-*)
				basedir=/opt/${qnx_target}/host/linux/${cpu}/usr
				qnxtarget=/opt/${qnx_target}/target/${qnx_os_dir}
				;;
			*)
				echo "Unsupported host ${host-target}"
				exit 1 ;;
		esac ;;
	win64)
		tooldir=${QNX_HOST:-c:/${qnx_target}/host/win64/${cpu}}
		basedir=${tooldir}/usr
		;;
	*)
		echo "Don't have config for ${SYSNAME}"
		exit 1
		;;
	esac

# Set TARGET VERSION specific flags
	case ${target} in
	*nto-qnx7.*)
		configure_opts="${configure_opts} --enable-gnu-indirect-function=yes"
		configure_opts="${configure_opts} --enable-cxx-flags=-stdlib=libstdc++"
		configure_opts="${configure_opts} --enable-cheaders=c_global"
		configure_opts="${configure_opts} --enable-initfini-array"
		configure_opts="${configure_opts} --enable-default-pie"
		configure_opts="${configure_opts} --with-as=${target}-as"
		configure_opts="${configure_opts} --with-ld=${target}-ld"
		;;
	*)	echo "${target} is not supported!"
		exit 1
		;;
	esac

# Set TARGET CPU specific flags
	case ${cpu_string} in
		x86*)
			configure_opts="${configure_opts} --with-tune=generic"
			;;
		armeabi)
			configure_opts="${configure_opts} --with-float=hard"
			configure_opts="${configure_opts} --with-arch=armv7-a"
			configure_opts="${configure_opts} --with-fpu=vfpv3"
			configure_opts="${configure_opts} --with-mode=thumb"
			;;
		armeabihf)
			configure_opts="${configure_opts} --with-float=hard"
			configure_opts="${configure_opts} --with-arch=armv7-a"
			configure_opts="${configure_opts} --with-fpu=vfpv3"
			configure_opts="${configure_opts} --with-mode=thumb"
			;;
		*)
			;;
	esac

# Installation root - set to /opt/qnxXXX/... so packager will find binaries
	configure_opts="${configure_opts} --prefix=${basedir}"
	configure_opts="${configure_opts} --libexecdir=${basedir}/lib"
	configure_opts="${configure_opts} --with-gxx-include-dir=${qnxtarget}/usr/include/c++/$gcc_version"
	configure_opts="${configure_opts} --enable-threads=posix"
	configure_opts="${configure_opts} --enable-__cxa_atexit"
	configure_opts="${configure_opts} --enable-languages=c++"
#	configure_opts="${configure_opts} --enable-werror --enable-werror-always"

#cross options
	configure_opts="${configure_opts} --with-sysroot=${QNX_TARGET}"
	configure_opts="${configure_opts} --target=${target}"

	configure_opts="${configure_opts} --disable-nls"
	configure_opts="${configure_opts} --disable-tls"
	configure_opts="${configure_opts} --disable-libssp"
	configure_opts="${configure_opts} --disable-libstdcxx-pch"
	configure_opts="${configure_opts} --enable-libgomp"
	configure_opts="${configure_opts} --enable-shared"
	configure_opts="${configure_opts} --enable-multilib"
	configure_opts="${configure_opts} --with-bugurl=http://www.qnx.com"
	configure_opts="${configure_opts} --enable-default-ssp"

	# The cross compilation of libgcc.a and libstdc++ require system headers
	# from the next version of Neutrino while gcc itself should be compiled
	# against the currently released version. This symlink puts the system
	# headers in a location already referenced by the makefiles for libgcc
	# and libstd++. This location is where gcc would like to see headers
	# but we aren't currently using it. Thus the symlink is safe for now.

	if test "${SYSNAME}" = "nto"; then
		if test -n "${USE_ROOT_nto}"; then
			op ln -sP ${USE_ROOT_nto}/usr/include ${basedir}/${target}/include
		fi
	fi
}

function hook_premake {
	strip_r_switch
	make_opts="CFLAGS+=-O2 CXXFLAGS+=-O2"
}

function hook_postmake {
	if [ ${TARGET_SYSNAME} = nto ]; then
		if which elfnote >/dev/null; then
			elfnote -L -S $STACKSIZE gcc/cc1
			elfnote -L -S $STACKSIZE gcc/cc1plus
		else
			ldrel -L -S $STACKSIZE gcc/cc1
			ldrel -L -S $STACKSIZE gcc/cc1plus
		fi
		if [ -f "${target}/pic/libstdc++-v3/libsupc++/.libs/libsupc++.a" ]; then
			echo "${nto_target}-objcopy${binutils_version} --weaken ${target}/pic/libstdc++-v3/libsupc++/.libs/libsupc++.a ${target}/pic/libstdc++-v3/libsupc++/.libs/libcxa.a"
			${nto_target}-objcopy${binutils_version} --weaken ${target}/pic/libstdc++-v3/libsupc++/.libs/libsupc++.a ${target}/pic/libstdc++-v3/libsupc++/.libs/libcxa.a
		fi
	fi
}

function hook_pinfo {
	case ${SYSNAME} in
	win*)	exe_suffix=".exe" 	;;
	*)	exe_suffix=""		;;
	esac

	# Executables
}
